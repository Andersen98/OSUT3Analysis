import FWCore.ParameterSet.Config as cms
import copy

###########################################################
##### Define the branches to include in the BNTree    #####
###########################################################

# All variables have been included that are available in OSUAnalysis::valueLookup() functions,
# for OSUAnalysis.cc version 1.70  

MuonBranches = cms.PSet(
    inputCollection = cms.string("muons"),
    branches = cms.vstring (
        "energy",		   
        "et",			        
        "pt",			        
        "px",			        
        "py",			        
        "pz",			        
        "phi",			        
        "eta",			        
        "theta",			        
        "trackIso",		        
        "ecalIso",		        
        "hcalIso",		        
        "caloIso",		        
        "trackIsDR03",		        
        "ecalIsoDR03",		        
        "hcalIsoDR03",		        
        "caloIsoDR03",		        
        "trackVetoIsoDR03",	        
        "ecalVetoIsoDR03",	        
        "hcalVetoIsoDR03",	        
        "caloVetoIsoDR03",	        
        "trackIsoDR05",		        
        "ecalIsoDR05",		        
        "hcalIsoDR05",		        
        "caloIsoDR05",		        
        "trackVetoIsoDR05",	        
        "ecalVetoIsoDR05",	        
        "hcalVetoIsoDR05",	        
        "caloVetoIsoDR05",	        
        "hcalE",			        
        "ecalE",			        
        "genET",			        
        "genPT",			        
        "genPhi",		             
        "genEta",		             
        "genMotherET",		        
        "genMotherPT",		        
        "genMotherPhi",		        
        "genMotherEta",		        
        "vx",			        
        "vy",			        
        "vz",			        
        "tkNormChi2",		        
        "tkPT",			        
        "tkEta",			        
        "tkPhi",			        
        "tkDZ",			        
        "tkD0",			        
        "tkD0bs",		             
        "tkD0err",		        
        "samNormChi2",		        
        "samPT",			        
        "samEta",		             
        "samPhi",		             
        "samDZ",			        
        "samD0",			        
        "samD0bs",		        
        "samD0err",		        
        "comNormChi2",		        
        "comPT",			        
        "comEta",		             
        "comPhi",		             
        "comDZ",			        
        "comD0",			        
        "comD0bs",		        
        "comD0err",		        
        "isolationR03emVetoEt",	        
        "isolationR03hadVetoEt",	        
        "normalizedChi2",	             
        "dVzPVz",		             
        "dB",			        
        "ptErr",			        
        "innerTrackNormChi2",	        
        "correctedD0",		        
        "correctedD0Vertex",	        
        "correctedDZ",		        
        "particleIso",		        
        "chargedHadronIso",	        
        "neutralHadronIso",	        
        "photonIso",		        
        "puChargedHadronIso",	        
        "chargedHadronIsoDR03",	        
        "neutralHadronIsoDR03",	        
        "photonIsoDR03",		        
        "puChargedHadronIsoDR03",             
        "chargedHadronIsoDR04",	        
        "neutralHadronIsoDR04",	        
        "photonIsoDR04",		        
        "puChargedHadronIsoDR04",             
        "rhoPrime",		        
        "AEffDr03",		        
        "AEffDr04",		        
        "pfIsoR03SumChargedHadronPt",        
        "pfIsoR03SumNeutralHadronEt",        
        "pfIsoR03SumPhotonEt",	        
        "pfIsoR03SumPUPt",	        
        "pfIsoR04SumChargedHadronPt",        
        "pfIsoR04SumNeutralHadronEt",        
        "pfIsoR04SumPhotonEt",	        
        "pfIsoR04SumPUPt",	        
        "IP",			        
        "IPError",		        
        "timeAtIpInOut",		        
        "timeAtIpInOutErr",	        
        "timeAtIpOutIn",		        
        "timeAtIpOutInErr",	        
        "ecal_time",		        
        "hcal_time",		        
        "ecal_timeError",	             
        "hcal_timeError",	             
        "energy_ecal",		        
        "energy_hcal",		        
        "e3x3_ecal",		        
        "e3x3_hcal",		        
        "energyMax_ecal",	             
        "energyMax_hcal",	             
        "charge",		             
        "IDGMPTight",		        
        "tkNumValidHits",	             
        "tkCharge",		        
        "samNumValidHits",	        
        "samCharge",		        
        "comNumValidHits",	        
        "comCharge",		        
        "genId",			        
        "genCharge",		        
        "genNumberOfMothers",	        
        "genMotherId",		        
        "genMotherCharge",	        
        "genMother0Id",		        
        "genMother1Id",		        
        "genGrandMother00Id",	        
        "genGrandMother01Id",	        
        "genGrandMother10Id",	        
        "genGrandMother11Id",	        
        "isPFMuon",		        
        "isGoodMuon_1StationTight",        
        "isGlobalMuon",		        
        "isTrackerMuon",		        
        "isStandAloneMuon",	        
        "isGlobalMuonPromptTight",        
        "numberOfValidMuonHits",	        
        "numberOfValidTrackerHits",        
        "numberOfLayersWithMeasurement",        
        "pixelLayersWithMeasurement",        
        "numberOfMatches",	        
        "numberOfValidTrackerHitsInnerTrack",    
        "numberOfValidPixelHits",             
        "numberOfMatchedStations",        
        "time_ndof",		        
        "correctedD0VertexErr",	        
        "correctedD0VertexSig",	        
        "detIso",		             
        "relPFdBetaIso",		        
        "relPFrhoIso",		        
        "metMT",
        "ptPlusMet", 
        "correctedD0VertexInEBPlus",	
        "correctedD0VertexOutEBPlus",	
        "correctedD0VertexEEPlus",	
        "correctedD0BeamspotInEBPlus",	
        "correctedD0BeamspotOutEBPlus",	
        "correctedD0BeamspotEEPlus",	
        "correctedD0VertexInEBMinus",	
        "correctedD0VertexOutEBMinus",	
        "correctedD0VertexEEMinus",	
        "correctedD0BeamspotInEBMinus",	
        "correctedD0BeamspotOutEBMinus",	
        "correctedD0BeamspotEEMinus",	
        "correctedD0VertexInEBPositiveCharge",
        "correctedD0VertexOutEBPositiveCharge",
        "correctedD0VertexEEPositiveCharge",
        "correctedD0BeamspotInEBPositiveCharge",
        "correctedD0BeamspotOutEBPositiveCharge",
        "correctedD0BeamspotEEPositiveCharge",
        "correctedD0VertexInEBNegativeCharge",
        "correctedD0VertexOutEBNegativeCharge",
        "correctedD0VertexEENegativeCharge",
        "correctedD0BeamspotInEBNegativeCharge",
        "correctedD0BeamspotOutEBNegativeCharge",
        "correctedD0BeamspotEENegativeCharge",
        "looseID",
        "tightID",		        
        "tightIDdisplaced",		
        "genDeltaRLowest",		
        "genMatchedPdgId",		
        "genMatchedId",		        
        "genMatchedMotherId",		
        "genMatchedMotherIdReverse",	
        "genMatchedGrandmotherId",	
        "genMatchedGrandmotherIdReverse",	
        "pfMuonsFromVertex",
    )  # end branches = cms.vstring (
) # end MuonBranches = cms.PSet(


JetBranches = cms.PSet(
    inputCollection = cms.string("jets"),
    branches = cms.vstring (
        "energy",				
        "et",					
        "pt",					
        "px",					
        "py",					
        "pz",					
        "phi",					
        "eta",					
        "theta",				
        "Upt",					
        "Uenergy",				
        "L2pt",					
        "L2L3pt",				
        "L2L3respt",				
        "respt",				
        "EMfrac",				
        "Hadfrac",				
        "charge",				
        "mass",					
        "area",					
        "fHPD",					
        "approximatefHPD",			
        "genPartonET",				
        "genPartonPT",				
        "genPartonEta",				
        "genPartonPhi",				
        "genJetET",				
        "genJetPT",				
        "genJetEta",				
        "genJetPhi",				
        "btagTChighPur",			
        "btagTChighEff",			
        "btagJetProb",				
        "btagJetBProb",				
        "btagSoftEle",				
        "btagSoftMuon",				
        "btagSoftMuonNoIP",			
        "btagSecVertex",			
        "btagSecVertexHighEff",			
        "btagSecVertexHighPur",			
        "btagCombinedSecVertex",		
        "btagCombinedSecVertexMVA",		
        "btagSoftMuonByPt",			
        "btagSoftMuonByIP3",			
        "btagSoftElectronByPt",			
        "btagSoftElectronByIP3",		
        "n90Hits",				
        "hitsInN90",				
        "chargedHadronEnergyFraction",		
        "neutralHadronEnergyFraction",		
        "chargedEmEnergyFraction",		
        "neutralEmEnergyFraction",		
        "fLong",				
        "fShort",				
        "etaetaMoment",				
        "phiphiMoment",				
        "JESunc",				
        "JECuncUp",				
        "JECuncDown",				
        "puJetMVA_full",			
        "puJetMVA_simple",			
        "puJetMVA_cutbased",			
        "dZ",					
        "dR2Mean",				
        "dRMean",				
        "frac01",				
        "frac02",				
        "frac03",				
        "frac04",				
        "frac05",				
        "frac06",				
        "frac07",				
        "beta",					
        "betaStar",				
        "betaClassic",				
        "betaStarClassic",			
        "ptD",					
        "nvtx",					
        "d0",					
        "leadCandPt",				
        "leadCandVx",				
        "leadCandVy",				
        "leadCandVz",				
        "leadCandDistFromPV",			
        "flavour",				
        "Nconst",				
        "jetIDMinimal",				
        "jetIDLooseAOD",			
        "jetIDLoose",				
        "jetIDTight",				
        "genPartonId",				
        "genPartonMotherId",			
        "genPartonMother0Id",			
        "genPartonMother1Id",			
        "genPartonGrandMotherId",		
        "genPartonGrandMother00Id",		
        "genPartonGrandMother01Id",		
        "genPartonGrandMother10Id",		
        "genPartonGrandMother11Id",		
        "chargedMultiplicity",			
        "neutralMultiplicity",			
        "nconstituents",			
        "nHit",					
        "puJetId_full",				
        "puJetId_simple",			
        "puJetId_cutbased",			
        "puJetId_tight_full",			
        "puJetId_tight_simple",			
        "puJetId_tight_cutbased",		
        "puJetId_medium_full",			
        "puJetId_medium_simple",		
        "puJetId_medium_cutbased",		
        "puJetId_loose_full",			
        "puJetId_loose_simple",			
        "puJetId_loose_cutbased",
        "disappTrkLeadingJetID", 
        "disappTrkSubLeadingJetID",
        "dPhiMet",
    ) # end branches = cms.vstring (
) # end JetBranches = cms.PSet(


ElectronBranches = cms.PSet(
    inputCollection = cms.string("electrons"),
    branches = cms.vstring (
        "energy",					
        "et",						
        "gsfEt",					
        "pt",						
        "px",						
        "py",						
        "pz",						
        "phi",						
        "eta",						
        "theta",					
        "pIn",						
        "pOut",						
        "EscOverPin",					
        "EseedOverPout",				
        "hadOverEm",					
        "trackIso",					
        "ecalIso",					
        "hcalIso",					
        "caloIso",					
        "trackIsoDR03",					
        "ecalIsoDR03",					
        "hcalIsoDR03",					
        "hcalIsoDR03depth1",				
        "hcalIsoDR03depth2",				
        "caloIsoDR03",					
        "trackIsoDR04",					
        "ecalIsoDR04",					
        "hcalIsoDR04",					
        "hcalIsoDR04depth1",				
        "hcalIsoDR04depth2",				
        "caloIsoDR04",					
        "fbrem",					
        "absInvEMinusInvPin",				
        "delPhiIn",					
        "delEtaIn",					
        "genET",					
        "genPT",					
        "genPhi",					
        "genEta",					
        "genMotherET",					
        "genMotherPT",					
        "genMotherPhi",					
        "genMotherEta",					
        "vx",						
        "vy",						
        "vz",						
        "scEnergy",					
        "scRawEnergy",					
        "scSigmaEtaEta",				
        "scSigmaIEtaIEta",				
        "scE1x5",					
        "scE2x5Max",					
        "scE5x5",					
        "scEt",						
        "scEta",					
        "scPhi",					
        "scZ",						
        "tkNormChi2",					
        "tkPT",						
        "tkEta",					
        "tkPhi",					
        "tkDZ",						
        "tkD0",						
        "tkD0bs",					
        "tkD0err",					
        "mva",						
        "mvaTrigV0",					
        "mvaNonTrigV0",					
        "dist",						
        "dcot",						
        "convradius",					
        "convPointX",					
        "convPointY",					
        "convPointZ",					
        "eMax",						
        "eLeft",					
        "eRight",					
        "eTop",						
        "eBottom",					
        "e3x3",						
        "swissCross",					
        "seedEnergy",					
        "seedTime",					
        "swissCrossNoI85",				
        "swissCrossI85",				
        "E2overE9NoI85",				
        "E2overE9I85",					
        "correctedD0",					
        "correctedD0Vertex",				
        "correctedDZ",					
        "particleIso",					
        "chargedHadronIso",				
        "neutralHadronIso",				
        "photonIso",					
        "puChargedHadronIso",				
        "chargedHadronIsoDR03",				
        "neutralHadronIsoDR03",				
        "photonIsoDR03",				
        "puChargedHadronIsoDR03",			
        "chargedHadronIsoDR04",				
        "neutralHadronIsoDR04",				
        "photonIsoDR04",				
        "puChargedHadronIsoDR04",			
        "rhoPrime",					
        "AEffDr03",					
        "AEffDr04",					
        "IP",						
        "IPError",					
        "charge",					
        "classification",				
        "genId",					
        "genCharge",					
        "genNumberOfMothers",				
        "genMotherId",					
        "genMotherCharge",				
        "genMother0Id",					
        "genMother1Id",					
        "genGrandMother00Id",				
        "genGrandMother01Id",				
        "genGrandMother10Id",				
        "genGrandMother11Id",				
        "numClusters",					
        "tkNumValidHits",				
        "tkCharge",					
        "gsfCharge",					
        "isEB",						
        "isEE",						
        "isGap",					
        "isEBEEGap",					
        "isEBGap",					
        "isEEGap",					
        "isEcalDriven",					
        "isTrackerDriven",				
        "numberOfLostHits",				
        "numberOfExpectedInnerHits",			
        "numberOfValidPixelHits",			
        "numberOfValidPixelBarrelHits",			
        "numberOfValidPixelEndcapHits",			
        "isHEEP",					
        "isHEEPnoEt",					
        "seedRecoFlag",					
        "eidRobustHighEnergy",				
        "eidRobustLoose",				
        "eidRobustTight",				
        "eidLoose",					
        "eidTight",					
        "eidVeryLooseMC",				
        "eidLooseMC",					
        "eidMediumMC",					
        "eidTightMC",					
        "eidSuperTightMC",				
        "eidHyperTight1MC",				
        "eidHyperTight2MC",				
        "eidHyperTight3MC",				
        "eidHyperTight4MC",				
        "passConvVeto",					
        "correctedD0VertexErr",				
        "correctedD0VertexSig",				
        "detIso",					
        "relPFrhoIso",					
        "metMT",					
        "ptPlusMet", 
        "correctedD0VertexEEPositiveChargeLowPt",	
        "correctedD0VertexEEPositiveChargeHighPt",	
        "correctedD0VertexInEBPlus",			
        "correctedD0VertexOutEBPlus",			
        "correctedD0VertexEEPlus",			
        "correctedD0BeamspotInEBPlus",			
        "correctedD0BeamspotOutEBPlus",			
        "correctedD0BeamspotEEPlus",			
        "correctedD0VertexInEBMinus",			
        "correctedD0VertexOutEBMinus",			
        "correctedD0VertexEEMinus",			
        "correctedD0BeamspotInEBMinus",			
        "correctedD0BeamspotOutEBMinus",		
        "correctedD0BeamspotEEMinus",			
        "looseID", 
        "tightID",					
        "correctedD0VertexInEBPositiveCharge",		
        "correctedD0VertexOutEBPositiveCharge",		
        "correctedD0VertexEEPositiveCharge",		
        "correctedD0BeamspotInEBPositiveCharge",	
        "correctedD0BeamspotOutEBPositiveCharge",	
        "correctedD0BeamspotEEPositiveCharge",		
        "correctedD0VertexInEBNegativeCharge",		
        "correctedD0VertexOutEBNegativeCharge",		
        "correctedD0VertexEENegativeCharge",		
        "correctedD0BeamspotInEBNegativeCharge",	
        "correctedD0BeamspotOutEBNegativeCharge",	
        "correctedD0BeamspotEENegativeCharge",		
        "tightIDdisplaced",				
        "genDeltaRLowest",				
        "genMatchedPdgId",				
        "genMatchedId",					
        "genMatchedMotherId",				
        "genMatchedMotherIdReverse",			
        "genMatchedGrandmotherId",			
        "genMatchedGrandmotherIdReverse",		
        "pfElectronsFromVertex",			
    )  # inputCollection = cms.string("electrons"),
)  # end ElectronBranches = cms.PSet(
 

EventBranches = cms.PSet(
    inputCollection = cms.string("events"),
    branches = cms.vstring (
        "weight",				
        "pthat",				
        "qScale",				
        "alphaQCD",				
        "alphaQED",				
        "scalePDF",				
        "x1",					
        "x2",					
        "xPDF1",				
        "xPDF2",				
        "BSx",					
        "BSy",					
        "BSz",					
        "PVx",					
        "PVy",					
        "PVz",					
        "bField",				
        "instLumi",				
        "bxLumi",				
        "FilterOutScrapingFraction",		
        "sumNVtx",				
        "sumTrueNVtx",				
        "nm1_true",				
        "n0_true",				
        "np1_true",				
        "numTruePV",				
        "Q2ScaleUpWgt",				
        "Q2ScaleDownWgt",			
        "rho_kt6PFJets",			
        "rho_kt6PFJetsCentralChargedPileUp",	
        "rho_kt6PFJetsCentralNeutral",		
        "rho_kt6PFJetsCentralNeutralTight",	
        "run",					
        "lumi",					
        "sample",				
        "numPV",				
        "W0decay",				
        "W1decay",				
        "Z0decay",				
        "Z1decay",				
        "H0decay",				
        "H1decay",				
        "hcalnoiseLoose",			
        "hcalnoiseTight",			
        "GoodVertex",				
        "FilterOutScraping",			
        "HBHENoiseFilter",			
        "CSCLooseHaloId",			
        "CSCTightHaloId",			
        "EcalLooseHaloId",			
        "EcalTightHaloId",			
        "HcalLooseHaloId",			
        "HcalTightHaloId",			
        "GlobalLooseHaloId",			
        "GlobalTightHaloId",			
        "LooseId",				
        "TightId",				
        "numGenPV",				
        "nm1",					
        "n0",					
        "np1",					
        "id1",					
        "id2",					
        "evt",					
        "puScaleFactor",			
        "muonScaleFactor",			
        "electronScaleFactor",			
        "stopCTauScaleFactor",			
    ) # end inputCollection = cms.string("events",					
) # end EventBranches = cms.PSet(

    

TauBranches = cms.PSet(
    inputCollection = cms.string("taus"),
    branches = cms.vstring (
        "px",					 
        "py",					 
        "pz",					 
        "energy",				 
        "et",					 
        "pt",					 
        "eta",					 
        "phi",					 
        "emFraction",					 
        "leadingTrackPt",				 
        "leadingTrackIpVtdxy",				 
        "leadingTrackIpVtdz",				 
        "leadingTrackIpVtdxyError",			 
        "leadingTrackIpVtdzError",			 
        "leadingTrackVx",				 
        "leadingTrackVy",				 
        "leadingTrackVz",				 
        "leadingTrackValidHits",			 
        "leadingTrackNormChiSqrd",			 
        "numProngs",					 
        "numSignalGammas",				 
        "numSignalNeutrals",				 
        "numSignalPiZeros",				 
        "decayMode",					 
        "charge",					 
        "inTheCracks",					 
        "HPSagainstElectronLoose",			 
        "HPSagainstElectronMVA",			 
        "HPSagainstElectronMedium",			 
        "HPSagainstElectronTight",			 
        "HPSagainstMuonLoose",				 
        "HPSagainstMuonMedium",				 
        "HPSagainstMuonTight",				 
        "HPSbyLooseCombinedIsolationDeltaBetaCorr",	 
        "HPSbyMediumCombinedIsolationDeltaBetaCorr",	 
        "HPSbyTightCombinedIsolationDeltaBetaCorr",	 
        "HPSbyVLooseCombinedIsolationDeltaBetaCorr",	 
        "HPSdecayModeFinding",
        "looseHadronicID", 
        "leadingTrackValid",				 
        "genDeltaRLowest",				 
        "genMatchedPdgId",				 
        "genMatchedId",					
        "genMatchedMotherId",				 
        "genMatchedMotherIdReverse",			 
        "genMatchedGrandmotherId",			 
        "genMatchedGrandmotherIdReverse",		 
    ) #  end branches = cms.vstring (
) #  end EventBranches = cms.PSet(


MetBranches = cms.PSet(
    inputCollection = cms.string("mets"),
    branches = cms.vstring (
        "et",					
        "pt",					
        "px",					
        "py",					
        "phi",					
        "Upt",					
        "Uphi",					
        "NeutralEMFraction",			
        "NeutralHadEtFraction",			
        "ChargedEMEtFraction",			
        "ChargedHadEtFraction",			
        "MuonEtFraction",			
        "Type6EtFraction",			
        "Type7EtFraction",			
        "genPT",				
        "genPhi",				
        "muonCorEx",				
        "muonCorEy",				
        "jet20CorEx",				
        "jet20CorEy",				
        "jet1CorEx",				
        "jet1CorEy",				
        "sumET",				
        "corSumET",				
        "mEtSig",				
        "metSignificance",			
        "significance",				
        "sigmaX2",				
        "sigmaY2",				
        "sigmaXY",				
        "sigmaYX",				
        "maxEtInEmTowers",			
        "emEtFraction",				
        "emEtInEB",				
        "emEtInEE",				
        "emEtInHF",				
        "maxEtInHadTowers",			
        "hadEtFraction",			
        "hadEtInHB",				
        "hadEtInHE",				
        "hadEtInHF",				
        "hadEtInHO",				
        "UDeltaPx",				
        "UDeltaPy",				
        "UDeltaP",				
        "Uscale",				
        "type2corPx",				
        "type2corPy",				
        "T2pt",					
        "T2px",					
        "T2py",					
        "T2phi",				
        "T2sumET",				
        "pfT1jet1pt",				
        "pfT1jet1phi",				
        "pfT1jet6pt",				
        "pfT1jet6phi",				
        "pfT1jet10pt",				
        "pfT1jet10phi",				
    ) # end  branches = cms.vstring 
) # end MetBranches = cms.PSet


TrackBranches = cms.PSet(
    inputCollection = cms.string("tracks"),
    branches = cms.vstring (
        "pt",							 
        "px",							 
        "py",							 
        "pz",							 
        "phi",							 
        "eta",							 
        "theta",						 
        "normChi2",						 
        "dZ",							 
        "d0",							 
        "d0err",						 
        "vx",							 
        "vy",							 
        "vz",							 
        "charge",						 
        "numValidHits",						 
        "isHighPurity",						 
        "caloEMDeltaRp3",					 
        "caloHadDeltaRp3",					 
        "caloEMDeltaRp4",					 
        "caloHadDeltaRp4",					 
        "caloEMDeltaRp5",					 
        "caloHadDeltaRp5",					 
        "nHitsMissingOuter",					 
        "nHitsMissingInner",					 
        "nHitsMissingMiddle",					 
        "depTrkRp3",		
        "depEcalRp3",		
        "depHcalRp3",		
        "depHoRp3",		
        "nTracksRp3",		
        "trackerVetoPtRp3",	
        "emVetoEtRp3",		
        "hadVetoEtRp3",		
        "hoVetoEtRp3",		
        "depTrkRp5",		
        "depEcalRp5",		
        "depHcalRp5",		
        "depHoRp5",		
        "nTracksRp5",		
        "trackerVetoPtRp5",	
        "emVetoEtRp5",		
        "hadVetoEtRp5",		
        "hoVetoEtRp5", 
        "d0wrtBS",						 
        "dZwrtBS",						 
        "depTrkRp3MinusPt",					 
        "depTrkRp5MinusPt",					 
        "dPhiMet", 
        "caloTotDeltaRp5",					 
        "caloTotDeltaRp5ByP",					 
        "caloTotDeltaRp5RhoCorr",				 
        "caloTotDeltaRp5ByPRhoCorr",				 
        "isIso",						 
        "trkRelIsoRp3", 
        "trkRelIsoRp5", 
        "isMatchedDeadEcal",					 
        "ptErrorByPt",						 
        "ptError",						 
        "ptRes",						 
        "d0wrtPV",						 
        "dZwrtPV",						 
        "deltaRMinSubLeadJet",
        "deltaRMinElecLooseMvaId",
        "deltaRMinMuonLooseId",
        "isPassMuonLooseID",
        "deltaRMinSecMuonLooseId",
        "deltaRMinSecMuonLooseIdGlobal",
        "deltaRMinTauLooseHadronicId",
        "genDeltaRLowest",					 
        "genMatchedPdgId",					 
        "genMatchedId",						 
        "genMatchedMotherId",					 
        "genMatchedMotherIdReverse",				 
        "genMatchedGrandmotherId",				 
        "genMatchedGrandmotherIdReverse",			 
    ) # end branches = cms.vstring (
) # end TrackBranches = cms.PSet(


GenJetBranches = cms.PSet(
    inputCollection = cms.string("genjets"),
    branches = cms.vstring (
        "pt",							 
        "eta",							 
        "phi",							 
        "px",							 
        "py",							 
        "pz",							 
        "et",							 
        "energy",						 
        "mass",							 
        "emEnergy",						 
        "hadEnergy",						 
        "invisibleEnergy",					 
        "auxiliaryEnergy",					 
        "charge",						 
    ) # end     branches = cms.vstring (
) # end GenJetBranches = cms.PSet(


McparticleBranches = cms.PSet(
    inputCollection = cms.string("mcparticles"),
    branches = cms.vstring (
        "energy",						
        "et",							
        "pt",							
        "px",							
        "py",							
        "pz",							
        "phi",							
        "eta",							
        "theta",						
        "mass",							
        "vx",							
        "vy",							
        "vz",							
        "motherET",						
        "motherPT",						
        "motherPhi",						
        "motherEta",						
        "mother0ET",						
        "mother0PT",						
        "mother0Phi",						
        "mother0Eta",						
        "mother1ET",						
        "mother1PT",						
        "mother1Phi",						
        "mother1Eta",						
        "daughter0ET",						
        "daughter0PT",						
        "daughter0Phi",						
        "daughter0Eta",						
        "daughter1ET",						
        "daughter1PT",						
        "daughter1Phi",						
        "daughter1Eta",						
        "grandMotherET",					
        "grandMotherPT",					
        "grandMotherPhi",					
        "grandMotherEta",					
        "grandMother00ET",					
        "grandMother00PT",					
        "grandMother00Phi",					
        "grandMother00Eta",					
        "grandMother01ET",					
        "grandMother01PT",					
        "grandMother01Phi",					
        "grandMother01Eta",					
        "grandMother10ET",					
        "grandMother10PT",					
        "grandMother10Phi",					
        "grandMother10Eta",					
        "grandMother11ET",					
        "grandMother11PT",					
        "grandMother11Phi",					
        "grandMother11Eta",					
        "charge",						
        "id",							
        "status",						
        "motherId",						
        "motherCharge",						
        "mother0Id",						
        "mother0Status",					
        "mother0Charge",					
        "mother1Id",						
        "mother1Status",					
        "mother1Charge",					
        "daughter0Id",						
        "daughter0Status",					
        "daughter0Charge",					
        "daughter1Id",						
        "daughter1Status",					
        "daughter1Charge",					
        "grandMotherId",					
        "grandMotherCharge",					
        "grandMother00Id",					
        "grandMother00Status",					
        "grandMother00Charge",					
        "grandMother01Id",					
        "grandMother01Status",					
        "grandMother01Charge",					
        "grandMother10Id",					
        "grandMother10Status",					
        "grandMother10Charge",					
        "grandMother11Id",					
        "grandMother11Status",					
        "grandMother11Charge",					
        "d0Vertex",							
        "d0Beamspot",							
        "d0Origin",							
        "dz",							
        "v0",							
        "deltaV0",						
        "deltaVx",						
        "deltaVy",						
        "deltaVz",						
    ) # end      branches = cms.vstring (
) #  end McparticleBranches = cms.PSet(
       
        
PrimaryVertexBranches = cms.PSet(
    inputCollection = cms.string("primaryvertexs"),
    branches = cms.vstring (
        "x",								 
        "xError",							 
        "y",								 
        "yError",							 
        "z",								 
        "zError",							 
        "rho",								 
        "normalizedChi2",						 
        "ndof",								 
        "isFake",							 
        "isValid",							 
        "tracksSize",							 
        "isGood",							 
    ) # end    branches = cms.vstring (
) # end PrimaryVertexBranches = cms.PSet(

BxlumiBranches = cms.PSet(
    inputCollection = cms.string("bxlumis"),
    branches = cms.vstring (
        "bx_B1_now",						
        "bx_B2_now",						
        "bx_LUMI_now",						
    ) # end    branches = cms.vstring (
) # end BxlumiBranches = cms.PSet(

PhotonBranches = cms.PSet(
    inputCollection = cms.string("photons"), 
    branches = cms.vstring (
        "energy",						
        "et",							
        "pt",							
        "px",							
        "py",							
        "pz",							
        "phi",							
        "eta",							
        "theta",						
        "trackIso",						
        "ecalIso",						
        "hcalIso",						
        "caloIso",						
        "trackIsoHollowConeDR03",				
        "trackIsoSolidConeDR03",				
        "ecalIsoDR03",						
        "hcalIsoDR03",						
        "caloIsoDR03",						
        "trackIsoHollowConeDR04",				
        "trackIsoSolidConeDR04",				
        "ecalIsoDR04",						
        "hcalIsoDR04",						
        "caloIsoDR04",						
        "hadOverEm",						
        "sigmaEtaEta",						
        "sigmaIetaIeta",					
        "r9",							
        "scEnergy",						
        "scRawEnergy",						
        "scSeedEnergy",						
        "scEta",						
        "scPhi",						
        "scZ",							
        "genET",						
        "genPT",						
        "genPhi",						
        "genEta",						
        "genMotherET",						
        "genMotherPT",						
        "genMotherPhi",						
        "genMotherEta",						
        "eMax",							
        "eLeft",						
        "eRight",						
        "eTop",							
        "eBottom",						
        "e3x3",							
        "swissCross",						
        "seedEnergy",						
        "seedTime",						
        "swissCrossNoI85",					
        "swissCrossI85",					
        "E2overE9NoI85",					
        "E2overE9I85",						
        "IDTight",						
        "IDLoose",						
        "IDLooseEM",						
        "genId",						
        "genCharge",						
        "genMotherId",						
        "genMotherCharge",					
        "isEB",							
        "isEE",							
        "isGap",						
        "isEBEEGap",						
        "isEBGap",						
        "isEEGap",						
        "hasPixelSeed",						
        "seedRecoFlag",						
        "genDeltaRLowest",					
        "genMatchedPdgId",					
        "genMatchedId",						
        "genMatchedMotherId",					
        "genMatchedMotherIdReverse",				
        "genMatchedGrandmotherId",				
        "genMatchedGrandmotherIdReverse",			
    ) # end    branches = cms.vstring (
) # end PhotonBranches = cms.PSet(


SuperclusterBranches = cms.PSet(
    inputCollection = cms.string("superclusters"),
    branches = cms.vstring (
        "energy",						
        "et",							
        "ex",							
        "ey",							
        "ez",							
        "phi",							
        "eta",							
        "theta",						
    ) # end    branches = cms.vstring (
) # end SuperclusterBranches = cms.PSet(


TrigObjBranches = cms.PSet(
    inputCollection = cms.string("trigobjs"),
    branches = cms.vstring (
        "pt",							
        "eta",							
        "phi",							
        "px",							
        "py",							
        "pz",							
        "et",							
        "energy",						
        "etTotal",						
        "id",							
        "charge",						
        "isIsolated",						
        "isMip",						
        "isForward",						
        "isRPC",						
        "bx",							
        "filter",						
    ) # end    branches = cms.vstring (
) # end TrigObjBranches = cms.PSet(


StopBranches = cms.PSet(
    inputCollection = cms.string("stops"),
    branches = cms.vstring (
        "ctau",						
        "d0",						
        "dz",						
        "minD0",					
        "minDz",					
        "distToVertex",					
        "minDistToVertex",				
        "distToVertexDifference",			
        "closestVertexRank",				
    ) # end    branches = cms.vstring (
) # end StopBranches = cms.PSet(


AllTreeBranchSets = cms.VPSet(
    EventBranches,
    MuonBranches,
    ElectronBranches,
    TauBranches,
    TrackBranches,
    MetBranches,
    JetBranches,
    GenJetBranches,
    SuperclusterBranches,
    #    PhotonBranches,  # not available in some BEANs  
    #    TrigObjBranches,
    #    PrimaryVertexBranches,
    #    BxlumiBranches,
    McparticleBranches,
    #    StopBranches,
)



